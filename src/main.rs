use rblk::api::start_server;
use rblk::blockchain::Blockchain;
use std::sync::{Arc, Mutex};

#[tokio::main]
async fn main() {
    let blockchain = Arc::new(Mutex::new(Blockchain::new()));

    start_server(blockchain).await;
}
// to do
// 1. get miner commissions
// 3. get network prototype
// 4. add transactions ui sum


/*
### API Документация

Данный API позволяет взаимодействовать с блокчейн-системой через HTTP-запросы. Он предоставляет функциональность для управления кошельками, создания транзакций, добавления блоков в блокчейн, проверки его валидности, а также сохранения и загрузки данных блокчейна.

#### Общие параметры
- **base_url**: `http://127.0.0.1:3000`

### Эндпоинты

---

#### 1. **Создание кошелька**
Создает новый кошелек и добавляет его в блокчейн.

- **URL**: `/wallet`
- **Метод**: `POST`
- **Ответ**: 
  - `201 Created`: Возвращает JSON с информацией о созданном кошельке.

**Пример ответа**:
```json
{
  "address": "address_string",
  "balance": 0
}
```

---

#### 2. **Получение баланса кошелька**
Возвращает баланс кошелька по его адресу.

- **URL**: `/balance/{address}`
- **Метод**: `GET`
- **Параметры URL**:
  - `address`: Адрес кошелька (строка).
- **Ответ**:
  - `200 OK`: Возвращает баланс кошелька в формате JSON.
  - `400 Bad Request`: Ошибка, если кошелек не найден.

**Пример ответа**:
```json
{
  "balance": 500
}
```

---

#### 3. **Создание транзакции**
Создает транзакцию между двумя кошельками.

- **URL**: `/transaction`
- **Метод**: `POST`
- **Тело запроса**:
  - `from`: Адрес отправителя (строка).
  - `to`: Адрес получателя (строка).
  - `amount`: Сумма транзакции (число).

**Пример запроса**:
```json
{
  "from": "sender_address",
  "to": "receiver_address",
  "amount": 100
}
```

- **Ответ**:
  - `201 Created`: Транзакция успешно создана.
  - `400 Bad Request`: Недостаточно средств для проведения транзакции.

**Пример ответа**:
```json
"Transaction created"
```

---

#### 4. **Добавление блока**
Добавляет новый блок в блокчейн.

- **URL**: `/block`
- **Метод**: `POST`
- **Тело запроса**:
  - `data`: Данные для блока (строка).
  - `miner_address`: Адрес майнера (строка).

**Пример запроса**:
```json
{
  "data": "block data",
  "miner_address": "miner_address"
}
```

- **Ответ**:
  - `201 Created`: Блок успешно добавлен.

**Пример ответа**:
```json
"Block added"
```

---

#### 5. **Проверка валидности цепочки блоков**
Проверяет, является ли блокчейн валидным.

- **URL**: `/chain/validity`
- **Метод**: `GET`
- **Ответ**:
  - `200 OK`: Блокчейн валиден.
  - `400 Bad Request`: Блокчейн не валиден.

**Пример ответа**:
```text
"Blockchain is valid"
```

---

#### 6. **Сохранение цепочки блоков**
Сохраняет текущее состояние блокчейна и кошельков в файлы.

- **URL**: `/chain/save`
- **Метод**: `POST`
- **Ответ**:
  - `200 OK`: Блокчейн и кошельки успешно сохранены.

**Пример ответа**:
```text
"Blockchain saved"
```

---

#### 7. **Загрузка цепочки блоков**
Загружает блокчейн и кошельки из файлов.

- **URL**: `/chain/load`
- **Метод**: `POST`
- **Ответ**:
  - `200 OK`: Блокчейн и кошельки успешно загружены.

**Пример ответа**:
```text
"Blockchain loaded"
```

*/